<?php
/**
 * CustomFields
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Cinolla
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cinolla Client API
 *
 * Welcome to Cinolla Client API documentation for version 3. Please see below for the available API endpoints and their required parameters and responses. If you have any questions, please contact [support@cinolla.com](mailto:support@cinolla.com).
 *
 * The version of the OpenAPI document: 3.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Cinolla\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Cinolla\ObjectSerializer;

/**
 * CustomFields Class Doc Comment
 *
 * @package  SynergiTech\Cinolla
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CustomFields implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CustomFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'showLabel' => 'bool',
        'label' => 'string',
        'type' => 'string',
        'placeholderValue' => 'string',
        'targetBooking' => 'bool',
        'active' => 'bool',
        'speciality' => 'string',
        'customFieldsValues' => '\SynergiTech\Cinolla\Model\CustomFieldsValues[]',
        'repeatRule' => 'string',
        'repeatAllowAdd' => 'bool',
        'repeatAllowRemove' => 'bool',
        'allowMultiple' => 'bool',
        'template' => '\SynergiTech\Cinolla\Model\CustomFieldsTemplate',
        'customFormSubformId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'showLabel' => null,
        'label' => null,
        'type' => null,
        'placeholderValue' => null,
        'targetBooking' => null,
        'active' => null,
        'speciality' => null,
        'customFieldsValues' => null,
        'repeatRule' => null,
        'repeatAllowAdd' => null,
        'repeatAllowRemove' => null,
        'allowMultiple' => null,
        'template' => null,
        'customFormSubformId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'showLabel' => false,
        'label' => false,
        'type' => false,
        'placeholderValue' => true,
        'targetBooking' => false,
        'active' => false,
        'speciality' => true,
        'customFieldsValues' => false,
        'repeatRule' => true,
        'repeatAllowAdd' => true,
        'repeatAllowRemove' => true,
        'allowMultiple' => false,
        'template' => true,
        'customFormSubformId' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'showLabel' => 'showLabel',
        'label' => 'label',
        'type' => 'type',
        'placeholderValue' => 'placeholderValue',
        'targetBooking' => 'targetBooking',
        'active' => 'active',
        'speciality' => 'speciality',
        'customFieldsValues' => 'customFieldsValues',
        'repeatRule' => 'repeatRule',
        'repeatAllowAdd' => 'repeatAllowAdd',
        'repeatAllowRemove' => 'repeatAllowRemove',
        'allowMultiple' => 'allowMultiple',
        'template' => 'template',
        'customFormSubformId' => 'customFormSubformId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'showLabel' => 'setShowLabel',
        'label' => 'setLabel',
        'type' => 'setType',
        'placeholderValue' => 'setPlaceholderValue',
        'targetBooking' => 'setTargetBooking',
        'active' => 'setActive',
        'speciality' => 'setSpeciality',
        'customFieldsValues' => 'setCustomFieldsValues',
        'repeatRule' => 'setRepeatRule',
        'repeatAllowAdd' => 'setRepeatAllowAdd',
        'repeatAllowRemove' => 'setRepeatAllowRemove',
        'allowMultiple' => 'setAllowMultiple',
        'template' => 'setTemplate',
        'customFormSubformId' => 'setCustomFormSubformId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'showLabel' => 'getShowLabel',
        'label' => 'getLabel',
        'type' => 'getType',
        'placeholderValue' => 'getPlaceholderValue',
        'targetBooking' => 'getTargetBooking',
        'active' => 'getActive',
        'speciality' => 'getSpeciality',
        'customFieldsValues' => 'getCustomFieldsValues',
        'repeatRule' => 'getRepeatRule',
        'repeatAllowAdd' => 'getRepeatAllowAdd',
        'repeatAllowRemove' => 'getRepeatAllowRemove',
        'allowMultiple' => 'getAllowMultiple',
        'template' => 'getTemplate',
        'customFormSubformId' => 'getCustomFormSubformId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], '');
        $this->setIfExists('showLabel', $data ?? [], true);
        $this->setIfExists('label', $data ?? [], '');
        $this->setIfExists('type', $data ?? [], '');
        $this->setIfExists('placeholderValue', $data ?? [], '');
        $this->setIfExists('targetBooking', $data ?? [], false);
        $this->setIfExists('active', $data ?? [], true);
        $this->setIfExists('speciality', $data ?? [], null);
        $this->setIfExists('customFieldsValues', $data ?? [], null);
        $this->setIfExists('repeatRule', $data ?? [], null);
        $this->setIfExists('repeatAllowAdd', $data ?? [], false);
        $this->setIfExists('repeatAllowRemove', $data ?? [], false);
        $this->setIfExists('allowMultiple', $data ?? [], false);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('customFormSubformId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['customFieldsValues'] === null) {
            $invalidProperties[] = "'customFieldsValues' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets showLabel
     *
     * @return bool|null
     */
    public function getShowLabel(): ?bool
    {
        return $this->container['showLabel'];
    }

    /**
     * Sets showLabel
     *
     * @param bool|null $showLabel showLabel
     *
     * @return $this
     */
    public function setShowLabel(?bool $showLabel): static
    {
        if (is_null($showLabel)) {
            throw new InvalidArgumentException('non-nullable showLabel cannot be null');
        }
        $this->container['showLabel'] = $showLabel;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel(): ?string
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return $this
     */
    public function setLabel(?string $label): static
    {
        if (is_null($label)) {
            throw new InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets placeholderValue
     *
     * @return string|null
     */
    public function getPlaceholderValue(): ?string
    {
        return $this->container['placeholderValue'];
    }

    /**
     * Sets placeholderValue
     *
     * @param string|null $placeholderValue placeholderValue
     *
     * @return $this
     */
    public function setPlaceholderValue(?string $placeholderValue): static
    {
        if (is_null($placeholderValue)) {
            array_push($this->openAPINullablesSetToNull, 'placeholderValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('placeholderValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['placeholderValue'] = $placeholderValue;

        return $this;
    }

    /**
     * Gets targetBooking
     *
     * @return bool|null
     */
    public function getTargetBooking(): ?bool
    {
        return $this->container['targetBooking'];
    }

    /**
     * Sets targetBooking
     *
     * @param bool|null $targetBooking targetBooking
     *
     * @return $this
     */
    public function setTargetBooking(?bool $targetBooking): static
    {
        if (is_null($targetBooking)) {
            throw new InvalidArgumentException('non-nullable targetBooking cannot be null');
        }
        $this->container['targetBooking'] = $targetBooking;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive(): ?bool
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return $this
     */
    public function setActive(?bool $active): static
    {
        if (is_null($active)) {
            throw new InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets speciality
     *
     * @return string|null
     */
    public function getSpeciality(): ?string
    {
        return $this->container['speciality'];
    }

    /**
     * Sets speciality
     *
     * @param string|null $speciality speciality
     *
     * @return $this
     */
    public function setSpeciality(?string $speciality): static
    {
        if (is_null($speciality)) {
            array_push($this->openAPINullablesSetToNull, 'speciality');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('speciality', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['speciality'] = $speciality;

        return $this;
    }

    /**
     * Gets customFieldsValues
     *
     * @return \SynergiTech\Cinolla\Model\CustomFieldsValues[]
     */
    public function getCustomFieldsValues(): array
    {
        return $this->container['customFieldsValues'];
    }

    /**
     * Sets customFieldsValues
     *
     * @param \SynergiTech\Cinolla\Model\CustomFieldsValues[] $customFieldsValues customFieldsValues
     *
     * @return $this
     */
    public function setCustomFieldsValues(array $customFieldsValues): static
    {
        if (is_null($customFieldsValues)) {
            throw new InvalidArgumentException('non-nullable customFieldsValues cannot be null');
        }
        $this->container['customFieldsValues'] = $customFieldsValues;

        return $this;
    }

    /**
     * Gets repeatRule
     *
     * @return string|null
     */
    public function getRepeatRule(): ?string
    {
        return $this->container['repeatRule'];
    }

    /**
     * Sets repeatRule
     *
     * @param string|null $repeatRule repeatRule
     *
     * @return $this
     */
    public function setRepeatRule(?string $repeatRule): static
    {
        if (is_null($repeatRule)) {
            array_push($this->openAPINullablesSetToNull, 'repeatRule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repeatRule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repeatRule'] = $repeatRule;

        return $this;
    }

    /**
     * Gets repeatAllowAdd
     *
     * @return bool|null
     */
    public function getRepeatAllowAdd(): ?bool
    {
        return $this->container['repeatAllowAdd'];
    }

    /**
     * Sets repeatAllowAdd
     *
     * @param bool|null $repeatAllowAdd repeatAllowAdd
     *
     * @return $this
     */
    public function setRepeatAllowAdd(?bool $repeatAllowAdd): static
    {
        if (is_null($repeatAllowAdd)) {
            array_push($this->openAPINullablesSetToNull, 'repeatAllowAdd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repeatAllowAdd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repeatAllowAdd'] = $repeatAllowAdd;

        return $this;
    }

    /**
     * Gets repeatAllowRemove
     *
     * @return bool|null
     */
    public function getRepeatAllowRemove(): ?bool
    {
        return $this->container['repeatAllowRemove'];
    }

    /**
     * Sets repeatAllowRemove
     *
     * @param bool|null $repeatAllowRemove repeatAllowRemove
     *
     * @return $this
     */
    public function setRepeatAllowRemove(?bool $repeatAllowRemove): static
    {
        if (is_null($repeatAllowRemove)) {
            array_push($this->openAPINullablesSetToNull, 'repeatAllowRemove');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repeatAllowRemove', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repeatAllowRemove'] = $repeatAllowRemove;

        return $this;
    }

    /**
     * Gets allowMultiple
     *
     * @return bool|null
     */
    public function getAllowMultiple(): ?bool
    {
        return $this->container['allowMultiple'];
    }

    /**
     * Sets allowMultiple
     *
     * @param bool|null $allowMultiple allowMultiple
     *
     * @return $this
     */
    public function setAllowMultiple(?bool $allowMultiple): static
    {
        if (is_null($allowMultiple)) {
            throw new InvalidArgumentException('non-nullable allowMultiple cannot be null');
        }
        $this->container['allowMultiple'] = $allowMultiple;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \SynergiTech\Cinolla\Model\CustomFieldsTemplate|null
     */
    public function getTemplate(): ?\SynergiTech\Cinolla\Model\CustomFieldsTemplate
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \SynergiTech\Cinolla\Model\CustomFieldsTemplate|null $template template
     *
     * @return $this
     */
    public function setTemplate(?\SynergiTech\Cinolla\Model\CustomFieldsTemplate $template): static
    {
        if (is_null($template)) {
            array_push($this->openAPINullablesSetToNull, 'template');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets customFormSubformId
     *
     * @return int|null
     */
    public function getCustomFormSubformId(): ?int
    {
        return $this->container['customFormSubformId'];
    }

    /**
     * Sets customFormSubformId
     *
     * @param int|null $customFormSubformId customFormSubformId
     *
     * @return $this
     */
    public function setCustomFormSubformId(?int $customFormSubformId): static
    {
        if (is_null($customFormSubformId)) {
            array_push($this->openAPINullablesSetToNull, 'customFormSubformId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFormSubformId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFormSubformId'] = $customFormSubformId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


