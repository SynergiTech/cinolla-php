<?php
/**
 * CustomForm2
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Cinolla
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cinolla Client API
 *
 * Welcome to Cinolla Client API documentation for version 3. Please see below for the available API endpoints and their required parameters and responses. If you have any questions, please contact [support@cinolla.com](mailto:support@cinolla.com).
 *
 * The version of the OpenAPI document: 3.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Cinolla\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Cinolla\ObjectSerializer;

/**
 * CustomForm2 Class Doc Comment
 *
 * @package  SynergiTech\Cinolla
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CustomForm2 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CustomForm2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'hash' => 'string',
        'name' => 'string',
        'speciality' => 'string',
        'membership' => '\SynergiTech\Cinolla\Model\CustomForm2Membership',
        'active' => 'bool',
        'createdAt' => '\DateTime',
        'centre' => 'object',
        'customFormLocation' => '\SynergiTech\Cinolla\Model\CustomForm2CustomFormLocation',
        'customFormFields' => '\SynergiTech\Cinolla\Model\CustomFormFields[]',
        'customFormDisplayFields' => '\SynergiTech\Cinolla\Model\CustomFields[]',
        'customFormWorkflows' => '\SynergiTech\Cinolla\Model\CustomFormWorkflow[]',
        'requiresApproval' => 'bool',
        'requiresApprovalFromDate' => '\DateTime',
        'requiresVisitor' => 'bool',
        'dataRetentionPeriod' => 'int',
        'dataRetentionPeriodBooking' => 'int',
        'automaticReturnToForm' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'hash' => null,
        'name' => null,
        'speciality' => null,
        'membership' => null,
        'active' => null,
        'createdAt' => 'date-time',
        'centre' => null,
        'customFormLocation' => null,
        'customFormFields' => null,
        'customFormDisplayFields' => null,
        'customFormWorkflows' => null,
        'requiresApproval' => null,
        'requiresApprovalFromDate' => 'date-time',
        'requiresVisitor' => null,
        'dataRetentionPeriod' => null,
        'dataRetentionPeriodBooking' => null,
        'automaticReturnToForm' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'hash' => false,
        'name' => false,
        'speciality' => false,
        'membership' => true,
        'active' => false,
        'createdAt' => false,
        'centre' => false,
        'customFormLocation' => true,
        'customFormFields' => false,
        'customFormDisplayFields' => false,
        'customFormWorkflows' => false,
        'requiresApproval' => false,
        'requiresApprovalFromDate' => true,
        'requiresVisitor' => false,
        'dataRetentionPeriod' => true,
        'dataRetentionPeriodBooking' => true,
        'automaticReturnToForm' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'hash' => 'hash',
        'name' => 'name',
        'speciality' => 'speciality',
        'membership' => 'membership',
        'active' => 'active',
        'createdAt' => 'createdAt',
        'centre' => 'centre',
        'customFormLocation' => 'customFormLocation',
        'customFormFields' => 'customFormFields',
        'customFormDisplayFields' => 'customFormDisplayFields',
        'customFormWorkflows' => 'customFormWorkflows',
        'requiresApproval' => 'requiresApproval',
        'requiresApprovalFromDate' => 'requiresApprovalFromDate',
        'requiresVisitor' => 'requiresVisitor',
        'dataRetentionPeriod' => 'dataRetentionPeriod',
        'dataRetentionPeriodBooking' => 'dataRetentionPeriodBooking',
        'automaticReturnToForm' => 'automaticReturnToForm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'hash' => 'setHash',
        'name' => 'setName',
        'speciality' => 'setSpeciality',
        'membership' => 'setMembership',
        'active' => 'setActive',
        'createdAt' => 'setCreatedAt',
        'centre' => 'setCentre',
        'customFormLocation' => 'setCustomFormLocation',
        'customFormFields' => 'setCustomFormFields',
        'customFormDisplayFields' => 'setCustomFormDisplayFields',
        'customFormWorkflows' => 'setCustomFormWorkflows',
        'requiresApproval' => 'setRequiresApproval',
        'requiresApprovalFromDate' => 'setRequiresApprovalFromDate',
        'requiresVisitor' => 'setRequiresVisitor',
        'dataRetentionPeriod' => 'setDataRetentionPeriod',
        'dataRetentionPeriodBooking' => 'setDataRetentionPeriodBooking',
        'automaticReturnToForm' => 'setAutomaticReturnToForm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'hash' => 'getHash',
        'name' => 'getName',
        'speciality' => 'getSpeciality',
        'membership' => 'getMembership',
        'active' => 'getActive',
        'createdAt' => 'getCreatedAt',
        'centre' => 'getCentre',
        'customFormLocation' => 'getCustomFormLocation',
        'customFormFields' => 'getCustomFormFields',
        'customFormDisplayFields' => 'getCustomFormDisplayFields',
        'customFormWorkflows' => 'getCustomFormWorkflows',
        'requiresApproval' => 'getRequiresApproval',
        'requiresApprovalFromDate' => 'getRequiresApprovalFromDate',
        'requiresVisitor' => 'getRequiresVisitor',
        'dataRetentionPeriod' => 'getDataRetentionPeriod',
        'dataRetentionPeriodBooking' => 'getDataRetentionPeriodBooking',
        'automaticReturnToForm' => 'getAutomaticReturnToForm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], '');
        $this->setIfExists('name', $data ?? [], '');
        $this->setIfExists('speciality', $data ?? [], '');
        $this->setIfExists('membership', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], true);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('centre', $data ?? [], null);
        $this->setIfExists('customFormLocation', $data ?? [], null);
        $this->setIfExists('customFormFields', $data ?? [], null);
        $this->setIfExists('customFormDisplayFields', $data ?? [], null);
        $this->setIfExists('customFormWorkflows', $data ?? [], null);
        $this->setIfExists('requiresApproval', $data ?? [], false);
        $this->setIfExists('requiresApprovalFromDate', $data ?? [], null);
        $this->setIfExists('requiresVisitor', $data ?? [], false);
        $this->setIfExists('dataRetentionPeriod', $data ?? [], null);
        $this->setIfExists('dataRetentionPeriodBooking', $data ?? [], null);
        $this->setIfExists('automaticReturnToForm', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['centre'] === null) {
            $invalidProperties[] = "'centre' can't be null";
        }
        if ($this->container['customFormFields'] === null) {
            $invalidProperties[] = "'customFormFields' can't be null";
        }
        if ($this->container['customFormDisplayFields'] === null) {
            $invalidProperties[] = "'customFormDisplayFields' can't be null";
        }
        if ($this->container['customFormWorkflows'] === null) {
            $invalidProperties[] = "'customFormWorkflows' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash(): ?string
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash hash
     *
     * @return $this
     */
    public function setHash(?string $hash): static
    {
        if (is_null($hash)) {
            throw new InvalidArgumentException('non-nullable hash cannot be null');
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets speciality
     *
     * @return string|null
     */
    public function getSpeciality(): ?string
    {
        return $this->container['speciality'];
    }

    /**
     * Sets speciality
     *
     * @param string|null $speciality speciality
     *
     * @return $this
     */
    public function setSpeciality(?string $speciality): static
    {
        if (is_null($speciality)) {
            throw new InvalidArgumentException('non-nullable speciality cannot be null');
        }
        $this->container['speciality'] = $speciality;

        return $this;
    }

    /**
     * Gets membership
     *
     * @return \SynergiTech\Cinolla\Model\CustomForm2Membership|null
     */
    public function getMembership(): ?\SynergiTech\Cinolla\Model\CustomForm2Membership
    {
        return $this->container['membership'];
    }

    /**
     * Sets membership
     *
     * @param \SynergiTech\Cinolla\Model\CustomForm2Membership|null $membership membership
     *
     * @return $this
     */
    public function setMembership(?\SynergiTech\Cinolla\Model\CustomForm2Membership $membership): static
    {
        if (is_null($membership)) {
            array_push($this->openAPINullablesSetToNull, 'membership');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('membership', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['membership'] = $membership;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive(): ?bool
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return $this
     */
    public function setActive(?bool $active): static
    {
        if (is_null($active)) {
            throw new InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt(\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets centre
     *
     * @return object
     */
    public function getCentre(): object
    {
        return $this->container['centre'];
    }

    /**
     * Sets centre
     *
     * @param object $centre centre
     *
     * @return $this
     */
    public function setCentre(object $centre): static
    {
        if (is_null($centre)) {
            throw new InvalidArgumentException('non-nullable centre cannot be null');
        }
        $this->container['centre'] = $centre;

        return $this;
    }

    /**
     * Gets customFormLocation
     *
     * @return \SynergiTech\Cinolla\Model\CustomForm2CustomFormLocation|null
     */
    public function getCustomFormLocation(): ?\SynergiTech\Cinolla\Model\CustomForm2CustomFormLocation
    {
        return $this->container['customFormLocation'];
    }

    /**
     * Sets customFormLocation
     *
     * @param \SynergiTech\Cinolla\Model\CustomForm2CustomFormLocation|null $customFormLocation customFormLocation
     *
     * @return $this
     */
    public function setCustomFormLocation(?\SynergiTech\Cinolla\Model\CustomForm2CustomFormLocation $customFormLocation): static
    {
        if (is_null($customFormLocation)) {
            array_push($this->openAPINullablesSetToNull, 'customFormLocation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFormLocation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFormLocation'] = $customFormLocation;

        return $this;
    }

    /**
     * Gets customFormFields
     *
     * @return \SynergiTech\Cinolla\Model\CustomFormFields[]
     */
    public function getCustomFormFields(): array
    {
        return $this->container['customFormFields'];
    }

    /**
     * Sets customFormFields
     *
     * @param \SynergiTech\Cinolla\Model\CustomFormFields[] $customFormFields customFormFields
     *
     * @return $this
     */
    public function setCustomFormFields(array $customFormFields): static
    {
        if (is_null($customFormFields)) {
            throw new InvalidArgumentException('non-nullable customFormFields cannot be null');
        }
        $this->container['customFormFields'] = $customFormFields;

        return $this;
    }

    /**
     * Gets customFormDisplayFields
     *
     * @return \SynergiTech\Cinolla\Model\CustomFields[]
     */
    public function getCustomFormDisplayFields(): array
    {
        return $this->container['customFormDisplayFields'];
    }

    /**
     * Sets customFormDisplayFields
     *
     * @param \SynergiTech\Cinolla\Model\CustomFields[] $customFormDisplayFields customFormDisplayFields
     *
     * @return $this
     */
    public function setCustomFormDisplayFields(array $customFormDisplayFields): static
    {
        if (is_null($customFormDisplayFields)) {
            throw new InvalidArgumentException('non-nullable customFormDisplayFields cannot be null');
        }
        $this->container['customFormDisplayFields'] = $customFormDisplayFields;

        return $this;
    }

    /**
     * Gets customFormWorkflows
     *
     * @return \SynergiTech\Cinolla\Model\CustomFormWorkflow[]
     */
    public function getCustomFormWorkflows(): array
    {
        return $this->container['customFormWorkflows'];
    }

    /**
     * Sets customFormWorkflows
     *
     * @param \SynergiTech\Cinolla\Model\CustomFormWorkflow[] $customFormWorkflows customFormWorkflows
     *
     * @return $this
     */
    public function setCustomFormWorkflows(array $customFormWorkflows): static
    {
        if (is_null($customFormWorkflows)) {
            throw new InvalidArgumentException('non-nullable customFormWorkflows cannot be null');
        }
        $this->container['customFormWorkflows'] = $customFormWorkflows;

        return $this;
    }

    /**
     * Gets requiresApproval
     *
     * @return bool|null
     */
    public function getRequiresApproval(): ?bool
    {
        return $this->container['requiresApproval'];
    }

    /**
     * Sets requiresApproval
     *
     * @param bool|null $requiresApproval requiresApproval
     *
     * @return $this
     */
    public function setRequiresApproval(?bool $requiresApproval): static
    {
        if (is_null($requiresApproval)) {
            throw new InvalidArgumentException('non-nullable requiresApproval cannot be null');
        }
        $this->container['requiresApproval'] = $requiresApproval;

        return $this;
    }

    /**
     * Gets requiresApprovalFromDate
     *
     * @return \DateTime|null
     */
    public function getRequiresApprovalFromDate(): ?\DateTime
    {
        return $this->container['requiresApprovalFromDate'];
    }

    /**
     * Sets requiresApprovalFromDate
     *
     * @param \DateTime|null $requiresApprovalFromDate requiresApprovalFromDate
     *
     * @return $this
     */
    public function setRequiresApprovalFromDate(?\DateTime $requiresApprovalFromDate): static
    {
        if (is_null($requiresApprovalFromDate)) {
            array_push($this->openAPINullablesSetToNull, 'requiresApprovalFromDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requiresApprovalFromDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requiresApprovalFromDate'] = $requiresApprovalFromDate;

        return $this;
    }

    /**
     * Gets requiresVisitor
     *
     * @return bool|null
     */
    public function getRequiresVisitor(): ?bool
    {
        return $this->container['requiresVisitor'];
    }

    /**
     * Sets requiresVisitor
     *
     * @param bool|null $requiresVisitor requiresVisitor
     *
     * @return $this
     */
    public function setRequiresVisitor(?bool $requiresVisitor): static
    {
        if (is_null($requiresVisitor)) {
            throw new InvalidArgumentException('non-nullable requiresVisitor cannot be null');
        }
        $this->container['requiresVisitor'] = $requiresVisitor;

        return $this;
    }

    /**
     * Gets dataRetentionPeriod
     *
     * @return int|null
     */
    public function getDataRetentionPeriod(): ?int
    {
        return $this->container['dataRetentionPeriod'];
    }

    /**
     * Sets dataRetentionPeriod
     *
     * @param int|null $dataRetentionPeriod dataRetentionPeriod
     *
     * @return $this
     */
    public function setDataRetentionPeriod(?int $dataRetentionPeriod): static
    {
        if (is_null($dataRetentionPeriod)) {
            array_push($this->openAPINullablesSetToNull, 'dataRetentionPeriod');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dataRetentionPeriod', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dataRetentionPeriod'] = $dataRetentionPeriod;

        return $this;
    }

    /**
     * Gets dataRetentionPeriodBooking
     *
     * @return int|null
     */
    public function getDataRetentionPeriodBooking(): ?int
    {
        return $this->container['dataRetentionPeriodBooking'];
    }

    /**
     * Sets dataRetentionPeriodBooking
     *
     * @param int|null $dataRetentionPeriodBooking dataRetentionPeriodBooking
     *
     * @return $this
     */
    public function setDataRetentionPeriodBooking(?int $dataRetentionPeriodBooking): static
    {
        if (is_null($dataRetentionPeriodBooking)) {
            array_push($this->openAPINullablesSetToNull, 'dataRetentionPeriodBooking');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dataRetentionPeriodBooking', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dataRetentionPeriodBooking'] = $dataRetentionPeriodBooking;

        return $this;
    }

    /**
     * Gets automaticReturnToForm
     *
     * @return bool|null
     */
    public function getAutomaticReturnToForm(): ?bool
    {
        return $this->container['automaticReturnToForm'];
    }

    /**
     * Sets automaticReturnToForm
     *
     * @param bool|null $automaticReturnToForm automaticReturnToForm
     *
     * @return $this
     */
    public function setAutomaticReturnToForm(?bool $automaticReturnToForm): static
    {
        if (is_null($automaticReturnToForm)) {
            throw new InvalidArgumentException('non-nullable automaticReturnToForm cannot be null');
        }
        $this->container['automaticReturnToForm'] = $automaticReturnToForm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


