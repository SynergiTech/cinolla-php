<?php
/**
 * CreditNote2
 *
 * PHP version 8.1
 *
 * @package  SynergiTech\Cinolla
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cinolla Client API
 *
 * Welcome to Cinolla Client API documentation for version 3. Please see below for the available API endpoints and their required parameters and responses. If you have any questions, please contact [support@cinolla.com](mailto:support@cinolla.com).
 *
 * The version of the OpenAPI document: 3.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Cinolla\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SynergiTech\Cinolla\ObjectSerializer;

/**
 * CreditNote2 Class Doc Comment
 *
 * @package  SynergiTech\Cinolla
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CreditNote2 implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CreditNote2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'invoicedBooking' => '\SynergiTech\Cinolla\Model\CreditNote2InvoicedBooking',
        'creditNoteNumber' => 'int',
        'creditNoteDate' => '\DateTime',
        'totalVatAmount' => 'string',
        'totalNet' => 'string',
        'totalGross' => 'string',
        'billingAddressName' => 'string',
        'billingAddressOrganisation' => 'string',
        'billingAddressAddress1' => 'string',
        'billingAddressAddress2' => 'string',
        'billingAddressTown' => 'string',
        'billingAddressCounty' => 'string',
        'billingAddressPostcode' => 'string',
        'billingAddressCountry' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'globalReason' => 'string',
        'reference' => 'string',
        'void' => 'bool',
        'voidAt' => '\DateTime',
        'version' => 'int',
        'creditNoteInvoicedBookingLineItems' => '\SynergiTech\Cinolla\Model\CreditNoteInvoicedBookingLineItem2[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'invoicedBooking' => null,
        'creditNoteNumber' => null,
        'creditNoteDate' => 'date-time',
        'totalVatAmount' => null,
        'totalNet' => null,
        'totalGross' => null,
        'billingAddressName' => null,
        'billingAddressOrganisation' => null,
        'billingAddressAddress1' => null,
        'billingAddressAddress2' => null,
        'billingAddressTown' => null,
        'billingAddressCounty' => null,
        'billingAddressPostcode' => null,
        'billingAddressCountry' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'globalReason' => null,
        'reference' => null,
        'void' => null,
        'voidAt' => 'date-time',
        'version' => null,
        'creditNoteInvoicedBookingLineItems' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'invoicedBooking' => true,
        'creditNoteNumber' => false,
        'creditNoteDate' => false,
        'totalVatAmount' => true,
        'totalNet' => true,
        'totalGross' => true,
        'billingAddressName' => true,
        'billingAddressOrganisation' => true,
        'billingAddressAddress1' => true,
        'billingAddressAddress2' => true,
        'billingAddressTown' => true,
        'billingAddressCounty' => true,
        'billingAddressPostcode' => true,
        'billingAddressCountry' => true,
        'createdAt' => false,
        'updatedAt' => false,
        'globalReason' => true,
        'reference' => true,
        'void' => false,
        'voidAt' => true,
        'version' => false,
        'creditNoteInvoicedBookingLineItems' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'invoicedBooking' => 'invoicedBooking',
        'creditNoteNumber' => 'creditNoteNumber',
        'creditNoteDate' => 'creditNoteDate',
        'totalVatAmount' => 'totalVatAmount',
        'totalNet' => 'totalNet',
        'totalGross' => 'totalGross',
        'billingAddressName' => 'billingAddressName',
        'billingAddressOrganisation' => 'billingAddressOrganisation',
        'billingAddressAddress1' => 'billingAddressAddress1',
        'billingAddressAddress2' => 'billingAddressAddress2',
        'billingAddressTown' => 'billingAddressTown',
        'billingAddressCounty' => 'billingAddressCounty',
        'billingAddressPostcode' => 'billingAddressPostcode',
        'billingAddressCountry' => 'billingAddressCountry',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
        'globalReason' => 'globalReason',
        'reference' => 'reference',
        'void' => 'void',
        'voidAt' => 'voidAt',
        'version' => 'version',
        'creditNoteInvoicedBookingLineItems' => 'creditNoteInvoicedBookingLineItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'invoicedBooking' => 'setInvoicedBooking',
        'creditNoteNumber' => 'setCreditNoteNumber',
        'creditNoteDate' => 'setCreditNoteDate',
        'totalVatAmount' => 'setTotalVatAmount',
        'totalNet' => 'setTotalNet',
        'totalGross' => 'setTotalGross',
        'billingAddressName' => 'setBillingAddressName',
        'billingAddressOrganisation' => 'setBillingAddressOrganisation',
        'billingAddressAddress1' => 'setBillingAddressAddress1',
        'billingAddressAddress2' => 'setBillingAddressAddress2',
        'billingAddressTown' => 'setBillingAddressTown',
        'billingAddressCounty' => 'setBillingAddressCounty',
        'billingAddressPostcode' => 'setBillingAddressPostcode',
        'billingAddressCountry' => 'setBillingAddressCountry',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'globalReason' => 'setGlobalReason',
        'reference' => 'setReference',
        'void' => 'setVoid',
        'voidAt' => 'setVoidAt',
        'version' => 'setVersion',
        'creditNoteInvoicedBookingLineItems' => 'setCreditNoteInvoicedBookingLineItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'invoicedBooking' => 'getInvoicedBooking',
        'creditNoteNumber' => 'getCreditNoteNumber',
        'creditNoteDate' => 'getCreditNoteDate',
        'totalVatAmount' => 'getTotalVatAmount',
        'totalNet' => 'getTotalNet',
        'totalGross' => 'getTotalGross',
        'billingAddressName' => 'getBillingAddressName',
        'billingAddressOrganisation' => 'getBillingAddressOrganisation',
        'billingAddressAddress1' => 'getBillingAddressAddress1',
        'billingAddressAddress2' => 'getBillingAddressAddress2',
        'billingAddressTown' => 'getBillingAddressTown',
        'billingAddressCounty' => 'getBillingAddressCounty',
        'billingAddressPostcode' => 'getBillingAddressPostcode',
        'billingAddressCountry' => 'getBillingAddressCountry',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'globalReason' => 'getGlobalReason',
        'reference' => 'getReference',
        'void' => 'getVoid',
        'voidAt' => 'getVoidAt',
        'version' => 'getVersion',
        'creditNoteInvoicedBookingLineItems' => 'getCreditNoteInvoicedBookingLineItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoicedBooking', $data ?? [], null);
        $this->setIfExists('creditNoteNumber', $data ?? [], null);
        $this->setIfExists('creditNoteDate', $data ?? [], null);
        $this->setIfExists('totalVatAmount', $data ?? [], null);
        $this->setIfExists('totalNet', $data ?? [], null);
        $this->setIfExists('totalGross', $data ?? [], null);
        $this->setIfExists('billingAddressName', $data ?? [], null);
        $this->setIfExists('billingAddressOrganisation', $data ?? [], null);
        $this->setIfExists('billingAddressAddress1', $data ?? [], null);
        $this->setIfExists('billingAddressAddress2', $data ?? [], null);
        $this->setIfExists('billingAddressTown', $data ?? [], null);
        $this->setIfExists('billingAddressCounty', $data ?? [], null);
        $this->setIfExists('billingAddressPostcode', $data ?? [], null);
        $this->setIfExists('billingAddressCountry', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('globalReason', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('void', $data ?? [], false);
        $this->setIfExists('voidAt', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('creditNoteInvoicedBookingLineItems', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['creditNoteNumber'] === null) {
            $invalidProperties[] = "'creditNoteNumber' can't be null";
        }
        if ($this->container['creditNoteDate'] === null) {
            $invalidProperties[] = "'creditNoteDate' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['creditNoteInvoicedBookingLineItems'] === null) {
            $invalidProperties[] = "'creditNoteInvoicedBookingLineItems' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId(int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoicedBooking
     *
     * @return \SynergiTech\Cinolla\Model\CreditNote2InvoicedBooking|null
     */
    public function getInvoicedBooking(): ?\SynergiTech\Cinolla\Model\CreditNote2InvoicedBooking
    {
        return $this->container['invoicedBooking'];
    }

    /**
     * Sets invoicedBooking
     *
     * @param \SynergiTech\Cinolla\Model\CreditNote2InvoicedBooking|null $invoicedBooking invoicedBooking
     *
     * @return $this
     */
    public function setInvoicedBooking(?\SynergiTech\Cinolla\Model\CreditNote2InvoicedBooking $invoicedBooking): static
    {
        if (is_null($invoicedBooking)) {
            array_push($this->openAPINullablesSetToNull, 'invoicedBooking');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoicedBooking', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoicedBooking'] = $invoicedBooking;

        return $this;
    }

    /**
     * Gets creditNoteNumber
     *
     * @return int
     */
    public function getCreditNoteNumber(): int
    {
        return $this->container['creditNoteNumber'];
    }

    /**
     * Sets creditNoteNumber
     *
     * @param int $creditNoteNumber creditNoteNumber
     *
     * @return $this
     */
    public function setCreditNoteNumber(int $creditNoteNumber): static
    {
        if (is_null($creditNoteNumber)) {
            throw new InvalidArgumentException('non-nullable creditNoteNumber cannot be null');
        }
        $this->container['creditNoteNumber'] = $creditNoteNumber;

        return $this;
    }

    /**
     * Gets creditNoteDate
     *
     * @return \DateTime
     */
    public function getCreditNoteDate(): \DateTime
    {
        return $this->container['creditNoteDate'];
    }

    /**
     * Sets creditNoteDate
     *
     * @param \DateTime $creditNoteDate creditNoteDate
     *
     * @return $this
     */
    public function setCreditNoteDate(\DateTime $creditNoteDate): static
    {
        if (is_null($creditNoteDate)) {
            throw new InvalidArgumentException('non-nullable creditNoteDate cannot be null');
        }
        $this->container['creditNoteDate'] = $creditNoteDate;

        return $this;
    }

    /**
     * Gets totalVatAmount
     *
     * @return string|null
     */
    public function getTotalVatAmount(): ?string
    {
        return $this->container['totalVatAmount'];
    }

    /**
     * Sets totalVatAmount
     *
     * @param string|null $totalVatAmount totalVatAmount
     *
     * @return $this
     */
    public function setTotalVatAmount(?string $totalVatAmount): static
    {
        if (is_null($totalVatAmount)) {
            array_push($this->openAPINullablesSetToNull, 'totalVatAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalVatAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalVatAmount'] = $totalVatAmount;

        return $this;
    }

    /**
     * Gets totalNet
     *
     * @return string|null
     */
    public function getTotalNet(): ?string
    {
        return $this->container['totalNet'];
    }

    /**
     * Sets totalNet
     *
     * @param string|null $totalNet totalNet
     *
     * @return $this
     */
    public function setTotalNet(?string $totalNet): static
    {
        if (is_null($totalNet)) {
            array_push($this->openAPINullablesSetToNull, 'totalNet');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalNet', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalNet'] = $totalNet;

        return $this;
    }

    /**
     * Gets totalGross
     *
     * @return string|null
     */
    public function getTotalGross(): ?string
    {
        return $this->container['totalGross'];
    }

    /**
     * Sets totalGross
     *
     * @param string|null $totalGross totalGross
     *
     * @return $this
     */
    public function setTotalGross(?string $totalGross): static
    {
        if (is_null($totalGross)) {
            array_push($this->openAPINullablesSetToNull, 'totalGross');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalGross', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalGross'] = $totalGross;

        return $this;
    }

    /**
     * Gets billingAddressName
     *
     * @return string|null
     */
    public function getBillingAddressName(): ?string
    {
        return $this->container['billingAddressName'];
    }

    /**
     * Sets billingAddressName
     *
     * @param string|null $billingAddressName billingAddressName
     *
     * @return $this
     */
    public function setBillingAddressName(?string $billingAddressName): static
    {
        if (is_null($billingAddressName)) {
            array_push($this->openAPINullablesSetToNull, 'billingAddressName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingAddressName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingAddressName'] = $billingAddressName;

        return $this;
    }

    /**
     * Gets billingAddressOrganisation
     *
     * @return string|null
     */
    public function getBillingAddressOrganisation(): ?string
    {
        return $this->container['billingAddressOrganisation'];
    }

    /**
     * Sets billingAddressOrganisation
     *
     * @param string|null $billingAddressOrganisation billingAddressOrganisation
     *
     * @return $this
     */
    public function setBillingAddressOrganisation(?string $billingAddressOrganisation): static
    {
        if (is_null($billingAddressOrganisation)) {
            array_push($this->openAPINullablesSetToNull, 'billingAddressOrganisation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingAddressOrganisation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingAddressOrganisation'] = $billingAddressOrganisation;

        return $this;
    }

    /**
     * Gets billingAddressAddress1
     *
     * @return string|null
     */
    public function getBillingAddressAddress1(): ?string
    {
        return $this->container['billingAddressAddress1'];
    }

    /**
     * Sets billingAddressAddress1
     *
     * @param string|null $billingAddressAddress1 billingAddressAddress1
     *
     * @return $this
     */
    public function setBillingAddressAddress1(?string $billingAddressAddress1): static
    {
        if (is_null($billingAddressAddress1)) {
            array_push($this->openAPINullablesSetToNull, 'billingAddressAddress1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingAddressAddress1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingAddressAddress1'] = $billingAddressAddress1;

        return $this;
    }

    /**
     * Gets billingAddressAddress2
     *
     * @return string|null
     */
    public function getBillingAddressAddress2(): ?string
    {
        return $this->container['billingAddressAddress2'];
    }

    /**
     * Sets billingAddressAddress2
     *
     * @param string|null $billingAddressAddress2 billingAddressAddress2
     *
     * @return $this
     */
    public function setBillingAddressAddress2(?string $billingAddressAddress2): static
    {
        if (is_null($billingAddressAddress2)) {
            array_push($this->openAPINullablesSetToNull, 'billingAddressAddress2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingAddressAddress2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingAddressAddress2'] = $billingAddressAddress2;

        return $this;
    }

    /**
     * Gets billingAddressTown
     *
     * @return string|null
     */
    public function getBillingAddressTown(): ?string
    {
        return $this->container['billingAddressTown'];
    }

    /**
     * Sets billingAddressTown
     *
     * @param string|null $billingAddressTown billingAddressTown
     *
     * @return $this
     */
    public function setBillingAddressTown(?string $billingAddressTown): static
    {
        if (is_null($billingAddressTown)) {
            array_push($this->openAPINullablesSetToNull, 'billingAddressTown');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingAddressTown', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingAddressTown'] = $billingAddressTown;

        return $this;
    }

    /**
     * Gets billingAddressCounty
     *
     * @return string|null
     */
    public function getBillingAddressCounty(): ?string
    {
        return $this->container['billingAddressCounty'];
    }

    /**
     * Sets billingAddressCounty
     *
     * @param string|null $billingAddressCounty billingAddressCounty
     *
     * @return $this
     */
    public function setBillingAddressCounty(?string $billingAddressCounty): static
    {
        if (is_null($billingAddressCounty)) {
            array_push($this->openAPINullablesSetToNull, 'billingAddressCounty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingAddressCounty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingAddressCounty'] = $billingAddressCounty;

        return $this;
    }

    /**
     * Gets billingAddressPostcode
     *
     * @return string|null
     */
    public function getBillingAddressPostcode(): ?string
    {
        return $this->container['billingAddressPostcode'];
    }

    /**
     * Sets billingAddressPostcode
     *
     * @param string|null $billingAddressPostcode billingAddressPostcode
     *
     * @return $this
     */
    public function setBillingAddressPostcode(?string $billingAddressPostcode): static
    {
        if (is_null($billingAddressPostcode)) {
            array_push($this->openAPINullablesSetToNull, 'billingAddressPostcode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingAddressPostcode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingAddressPostcode'] = $billingAddressPostcode;

        return $this;
    }

    /**
     * Gets billingAddressCountry
     *
     * @return string|null
     */
    public function getBillingAddressCountry(): ?string
    {
        return $this->container['billingAddressCountry'];
    }

    /**
     * Sets billingAddressCountry
     *
     * @param string|null $billingAddressCountry billingAddressCountry
     *
     * @return $this
     */
    public function setBillingAddressCountry(?string $billingAddressCountry): static
    {
        if (is_null($billingAddressCountry)) {
            array_push($this->openAPINullablesSetToNull, 'billingAddressCountry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billingAddressCountry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billingAddressCountry'] = $billingAddressCountry;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt(\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt(): \DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt updatedAt
     *
     * @return $this
     */
    public function setUpdatedAt(\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets globalReason
     *
     * @return string|null
     */
    public function getGlobalReason(): ?string
    {
        return $this->container['globalReason'];
    }

    /**
     * Sets globalReason
     *
     * @param string|null $globalReason globalReason
     *
     * @return $this
     */
    public function setGlobalReason(?string $globalReason): static
    {
        if (is_null($globalReason)) {
            array_push($this->openAPINullablesSetToNull, 'globalReason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('globalReason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['globalReason'] = $globalReason;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets void
     *
     * @return bool|null
     */
    public function getVoid(): ?bool
    {
        return $this->container['void'];
    }

    /**
     * Sets void
     *
     * @param bool|null $void void
     *
     * @return $this
     */
    public function setVoid(?bool $void): static
    {
        if (is_null($void)) {
            throw new InvalidArgumentException('non-nullable void cannot be null');
        }
        $this->container['void'] = $void;

        return $this;
    }

    /**
     * Gets voidAt
     *
     * @return \DateTime|null
     */
    public function getVoidAt(): ?\DateTime
    {
        return $this->container['voidAt'];
    }

    /**
     * Sets voidAt
     *
     * @param \DateTime|null $voidAt voidAt
     *
     * @return $this
     */
    public function setVoidAt(?\DateTime $voidAt): static
    {
        if (is_null($voidAt)) {
            array_push($this->openAPINullablesSetToNull, 'voidAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voidAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voidAt'] = $voidAt;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion(): ?int
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version version
     *
     * @return $this
     */
    public function setVersion(?int $version): static
    {
        if (is_null($version)) {
            throw new InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets creditNoteInvoicedBookingLineItems
     *
     * @return \SynergiTech\Cinolla\Model\CreditNoteInvoicedBookingLineItem2[]
     */
    public function getCreditNoteInvoicedBookingLineItems(): array
    {
        return $this->container['creditNoteInvoicedBookingLineItems'];
    }

    /**
     * Sets creditNoteInvoicedBookingLineItems
     *
     * @param \SynergiTech\Cinolla\Model\CreditNoteInvoicedBookingLineItem2[] $creditNoteInvoicedBookingLineItems creditNoteInvoicedBookingLineItems
     *
     * @return $this
     */
    public function setCreditNoteInvoicedBookingLineItems(array $creditNoteInvoicedBookingLineItems): static
    {
        if (is_null($creditNoteInvoicedBookingLineItems)) {
            throw new InvalidArgumentException('non-nullable creditNoteInvoicedBookingLineItems cannot be null');
        }
        $this->container['creditNoteInvoicedBookingLineItems'] = $creditNoteInvoicedBookingLineItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


