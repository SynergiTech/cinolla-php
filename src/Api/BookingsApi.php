<?php
/**
 * BookingsApi
 * PHP version 8.1
 *
 * @package  SynergiTech\Cinolla
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cinolla Client API
 *
 * Welcome to Cinolla Client API documentation for version 3. Please see below for the available API endpoints and their required parameters and responses. If you have any questions, please contact [support@cinolla.com](mailto:support@cinolla.com).
 *
 * The version of the OpenAPI document: 3.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SynergiTech\Cinolla\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use SynergiTech\Cinolla\ApiException;
use SynergiTech\Cinolla\Configuration;
use SynergiTech\Cinolla\HeaderSelector;
use SynergiTech\Cinolla\ObjectSerializer;

/**
 * BookingsApi Class Doc Comment
 *
 * @package  SynergiTech\Cinolla
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BookingsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getBooking' => [
            'application/json',
        ],
        'getBookings' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getBooking
     *
     * Get detail for a single Booking
     *
     * @param  string $bookingHash bookingHash (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBooking'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Cinolla\Model\ClientBookingDetail
     */
    public function getBooking(
        string $bookingHash,
        string $contentType = self::contentTypes['getBooking'][0]
    ): \SynergiTech\Cinolla\Model\ClientBookingDetail
    {
        list($response) = $this->getBookingWithHttpInfo($bookingHash, $contentType);
        return $response;
    }

    /**
     * Operation getBookingWithHttpInfo
     *
     * Get detail for a single Booking
     *
     * @param  string $bookingHash (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBooking'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Cinolla\Model\ClientBookingDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookingWithHttpInfo(
        string $bookingHash,
        string $contentType = self::contentTypes['getBooking'][0]
    ): array
    {
        $request = $this->getBookingRequest($bookingHash, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Cinolla\Model\ClientBookingDetail', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Cinolla\Model\ClientBookingDetail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Cinolla\Model\ClientBookingDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Cinolla\Model\ClientBookingDetail';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Cinolla\Model\ClientBookingDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookingAsync
     *
     * Get detail for a single Booking
     *
     * @param  string $bookingHash (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBooking'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBookingAsync(
        string $bookingHash,
        string $contentType = self::contentTypes['getBooking'][0]
    ): PromiseInterface
    {
        return $this->getBookingAsyncWithHttpInfo($bookingHash, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookingAsyncWithHttpInfo
     *
     * Get detail for a single Booking
     *
     * @param  string $bookingHash (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBooking'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBookingAsyncWithHttpInfo(
        string $bookingHash,
        string $contentType = self::contentTypes['getBooking'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Cinolla\Model\ClientBookingDetail';
        $request = $this->getBookingRequest($bookingHash, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBooking'
     *
     * @param  string $bookingHash (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBooking'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBookingRequest(
        string $bookingHash,
        string $contentType = self::contentTypes['getBooking'][0]
    ): Request
    {

        // verify the required parameter 'bookingHash' is set
        if ($bookingHash === null || (is_array($bookingHash) && count($bookingHash) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $bookingHash when calling getBooking'
            );
        }


        $resourcePath = '/v3/client/bookings/{bookingHash}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bookingHash !== null) {
            $resourcePath = str_replace(
                '{' . 'bookingHash' . '}',
                ObjectSerializer::toPathValue($bookingHash),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBookings
     *
     * Get a collection of Bookings
     *
     * @param  \DateTime|null $startDate Start date of a date range. Used in conjunction with endDate to create a date range to filter by. (optional)
     * @param  \DateTime|null $endDate End date of a date range. Used in conjunction with startDate to create a date range to filter by. (optional)
     * @param  int|null $offset An offset to return a paginated list of results (optional, default to 0)
     * @param  int|null $limit The limit on the number of results (optional, default to 100)
     * @param  string|null $dateRangeFilter Used in conjunction with startDate and endDate to filter bookings. (optional, default to 'arrivalDate')
     * @param  bool|null $futureOnly Filter bookings by future only, based on arrival date being greater than now. (optional, default to false)
     * @param  string[]|null $tags Filter bookings by tag name. See tagsOperator. (optional)
     * @param  int[]|null $tagIds Filter bookings by tag ID. See tagsOperator. (optional)
     * @param  string|null $tagsOperator Operator for use with tags or tagIds params. If all, bookings must have all given tags. If oneOf, bookings must contain one of the given tags. (optional, default to 'all')
     * @param  string|null $reference Fuzzy match on booking reference, e.g. B-001 will match B-00100, B-00101, B-00102 etc. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookings'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \SynergiTech\Cinolla\Model\ClientBookingCollection[]
     */
    public function getBookings(
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $offset = 0,
        ?int $limit = 100,
        ?string $dateRangeFilter = 'arrivalDate',
        ?bool $futureOnly = false,
        ?array $tags = null,
        ?array $tagIds = null,
        ?string $tagsOperator = 'all',
        ?string $reference = null,
        string $contentType = self::contentTypes['getBookings'][0]
    ): array
    {
        list($response) = $this->getBookingsWithHttpInfo($startDate, $endDate, $offset, $limit, $dateRangeFilter, $futureOnly, $tags, $tagIds, $tagsOperator, $reference, $contentType);
        return $response;
    }

    /**
     * Operation getBookingsWithHttpInfo
     *
     * Get a collection of Bookings
     *
     * @param  \DateTime|null $startDate Start date of a date range. Used in conjunction with endDate to create a date range to filter by. (optional)
     * @param  \DateTime|null $endDate End date of a date range. Used in conjunction with startDate to create a date range to filter by. (optional)
     * @param  int|null $offset An offset to return a paginated list of results (optional, default to 0)
     * @param  int|null $limit The limit on the number of results (optional, default to 100)
     * @param  string|null $dateRangeFilter Used in conjunction with startDate and endDate to filter bookings. (optional, default to 'arrivalDate')
     * @param  bool|null $futureOnly Filter bookings by future only, based on arrival date being greater than now. (optional, default to false)
     * @param  string[]|null $tags Filter bookings by tag name. See tagsOperator. (optional)
     * @param  int[]|null $tagIds Filter bookings by tag ID. See tagsOperator. (optional)
     * @param  string|null $tagsOperator Operator for use with tags or tagIds params. If all, bookings must have all given tags. If oneOf, bookings must contain one of the given tags. (optional, default to 'all')
     * @param  string|null $reference Fuzzy match on booking reference, e.g. B-001 will match B-00100, B-00101, B-00102 etc. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookings'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \SynergiTech\Cinolla\Model\ClientBookingCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookingsWithHttpInfo(
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $offset = 0,
        ?int $limit = 100,
        ?string $dateRangeFilter = 'arrivalDate',
        ?bool $futureOnly = false,
        ?array $tags = null,
        ?array $tagIds = null,
        ?string $tagsOperator = 'all',
        ?string $reference = null,
        string $contentType = self::contentTypes['getBookings'][0]
    ): array
    {
        $request = $this->getBookingsRequest($startDate, $endDate, $offset, $limit, $dateRangeFilter, $futureOnly, $tags, $tagIds, $tagsOperator, $reference, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\SynergiTech\Cinolla\Model\ClientBookingCollection[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SynergiTech\Cinolla\Model\ClientBookingCollection[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SynergiTech\Cinolla\Model\ClientBookingCollection[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SynergiTech\Cinolla\Model\ClientBookingCollection[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SynergiTech\Cinolla\Model\ClientBookingCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookingsAsync
     *
     * Get a collection of Bookings
     *
     * @param  \DateTime|null $startDate Start date of a date range. Used in conjunction with endDate to create a date range to filter by. (optional)
     * @param  \DateTime|null $endDate End date of a date range. Used in conjunction with startDate to create a date range to filter by. (optional)
     * @param  int|null $offset An offset to return a paginated list of results (optional, default to 0)
     * @param  int|null $limit The limit on the number of results (optional, default to 100)
     * @param  string|null $dateRangeFilter Used in conjunction with startDate and endDate to filter bookings. (optional, default to 'arrivalDate')
     * @param  bool|null $futureOnly Filter bookings by future only, based on arrival date being greater than now. (optional, default to false)
     * @param  string[]|null $tags Filter bookings by tag name. See tagsOperator. (optional)
     * @param  int[]|null $tagIds Filter bookings by tag ID. See tagsOperator. (optional)
     * @param  string|null $tagsOperator Operator for use with tags or tagIds params. If all, bookings must have all given tags. If oneOf, bookings must contain one of the given tags. (optional, default to 'all')
     * @param  string|null $reference Fuzzy match on booking reference, e.g. B-001 will match B-00100, B-00101, B-00102 etc. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBookingsAsync(
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $offset = 0,
        ?int $limit = 100,
        ?string $dateRangeFilter = 'arrivalDate',
        ?bool $futureOnly = false,
        ?array $tags = null,
        ?array $tagIds = null,
        ?string $tagsOperator = 'all',
        ?string $reference = null,
        string $contentType = self::contentTypes['getBookings'][0]
    ): PromiseInterface
    {
        return $this->getBookingsAsyncWithHttpInfo($startDate, $endDate, $offset, $limit, $dateRangeFilter, $futureOnly, $tags, $tagIds, $tagsOperator, $reference, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookingsAsyncWithHttpInfo
     *
     * Get a collection of Bookings
     *
     * @param  \DateTime|null $startDate Start date of a date range. Used in conjunction with endDate to create a date range to filter by. (optional)
     * @param  \DateTime|null $endDate End date of a date range. Used in conjunction with startDate to create a date range to filter by. (optional)
     * @param  int|null $offset An offset to return a paginated list of results (optional, default to 0)
     * @param  int|null $limit The limit on the number of results (optional, default to 100)
     * @param  string|null $dateRangeFilter Used in conjunction with startDate and endDate to filter bookings. (optional, default to 'arrivalDate')
     * @param  bool|null $futureOnly Filter bookings by future only, based on arrival date being greater than now. (optional, default to false)
     * @param  string[]|null $tags Filter bookings by tag name. See tagsOperator. (optional)
     * @param  int[]|null $tagIds Filter bookings by tag ID. See tagsOperator. (optional)
     * @param  string|null $tagsOperator Operator for use with tags or tagIds params. If all, bookings must have all given tags. If oneOf, bookings must contain one of the given tags. (optional, default to 'all')
     * @param  string|null $reference Fuzzy match on booking reference, e.g. B-001 will match B-00100, B-00101, B-00102 etc. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBookingsAsyncWithHttpInfo(
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $offset = 0,
        ?int $limit = 100,
        ?string $dateRangeFilter = 'arrivalDate',
        ?bool $futureOnly = false,
        ?array $tags = null,
        ?array $tagIds = null,
        ?string $tagsOperator = 'all',
        ?string $reference = null,
        string $contentType = self::contentTypes['getBookings'][0]
    ): PromiseInterface
    {
        $returnType = '\SynergiTech\Cinolla\Model\ClientBookingCollection[]';
        $request = $this->getBookingsRequest($startDate, $endDate, $offset, $limit, $dateRangeFilter, $futureOnly, $tags, $tagIds, $tagsOperator, $reference, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBookings'
     *
     * @param  \DateTime|null $startDate Start date of a date range. Used in conjunction with endDate to create a date range to filter by. (optional)
     * @param  \DateTime|null $endDate End date of a date range. Used in conjunction with startDate to create a date range to filter by. (optional)
     * @param  int|null $offset An offset to return a paginated list of results (optional, default to 0)
     * @param  int|null $limit The limit on the number of results (optional, default to 100)
     * @param  string|null $dateRangeFilter Used in conjunction with startDate and endDate to filter bookings. (optional, default to 'arrivalDate')
     * @param  bool|null $futureOnly Filter bookings by future only, based on arrival date being greater than now. (optional, default to false)
     * @param  string[]|null $tags Filter bookings by tag name. See tagsOperator. (optional)
     * @param  int[]|null $tagIds Filter bookings by tag ID. See tagsOperator. (optional)
     * @param  string|null $tagsOperator Operator for use with tags or tagIds params. If all, bookings must have all given tags. If oneOf, bookings must contain one of the given tags. (optional, default to 'all')
     * @param  string|null $reference Fuzzy match on booking reference, e.g. B-001 will match B-00100, B-00101, B-00102 etc. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBookingsRequest(
        ?\DateTime $startDate = null,
        ?\DateTime $endDate = null,
        ?int $offset = 0,
        ?int $limit = 100,
        ?string $dateRangeFilter = 'arrivalDate',
        ?bool $futureOnly = false,
        ?array $tags = null,
        ?array $tagIds = null,
        ?string $tagsOperator = 'all',
        ?string $reference = null,
        string $contentType = self::contentTypes['getBookings'][0]
    ): Request
    {












        $resourcePath = '/v3/client/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'startDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'endDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateRangeFilter,
            'dateRangeFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $futureOnly,
            'futureOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tagIds,
            'tagIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tagsOperator,
            'tagsOperator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference,
            'reference', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
